from neural_network import NN_BinClass
import pandas as pd
from skorch import NeuralNetBinaryClassifier

"https://machinelearningmastery.com/how-to-grid-search-hyperparameters-for-pytorch-models/"
from sklearn.model_selection import GridSearchCV

model = NeuralNetBinaryClassifier(
    module= NN_BinClass,
    max_epochs=150,
    batch_size=10,
)

print(model.initialize())

train_frame = pd.read_csv('training_dataframe.csv')
Y = train_frame['classification']                                                                        #   Define Y with the classification
X = train_frame.drop('classification', axis = 'columns').drop('Unnamed: 0', axis='columns')



param_grid = {
    'batch_size': [10, 20, 40, 60, 80, 100],
    'max_epochs': [10, 50, 100]
}

grid = GridSearchCV(estimator= model, param_grid=param_grid, n_jobs=-1, cv=3)
grid_result = grid.fit(X, Y)

print("Best: %f using %s" % (grid_result.best_score_, grid_result.best_params_))
means = grid_result.cv_results_['mean_test_score']
stds = grid_result.cv_results_['std_test_score']
params = grid_result.cv_results_['params']
for mean, stdev, param in zip(means, stds, params):
    print("%f (%f) with: %r" % (mean, stdev, param))



"""
Model moet nog van naam veranderd worden naar ons model en X en Y moeten nog 
gedefinieerd worden als onze data. De getallen die nu worden gebruikt om de batch 
size en num epochs the bepalen kan nog uitgebreid worden om het preciezer te bepalen, maar 
dan duurt het denk wel een tijdje.
"""
