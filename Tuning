from neural_network_V2 import NN_BinClass
from skorch import NeuralNetClassifier
import torch
import torch.nn as nn
import torch.optim as optim

"https://machinelearningmastery.com/how-to-grid-search-hyperparameters-for-pytorch-models/"
from sklearn.model_selection import GridSearchCV

from train_network import X_tensor
from train_network import Y_tensor

X = X_tensor
Y = Y_tensor.unsqueeze(1)


model = NeuralNetClassifier(
    module = NN_BinClass,
    criterion = nn.BCELoss,
    optimizer = optim.SGD,
    max_epochs=100,
    batch_size=10,
    verbose = False
)

param_grid = {
   # 'batch_size': [8, 16, 32, 64, 128, 256],
   # 'max_epochs': [50, 100, 300, 500],

   # 'optimizer__lr': [0.001, 0.01, 0.1, 0.2, 0.3],
   # 'optimizer__momentum': [0.0, 0.2, 0.4, 0.6, 0.8, 0.9],

   # 'module__activation': [nn.Identity, nn.ReLU, nn.ELU, nn.ReLU6,
   #                        nn.GELU, nn.Softplus, nn.Softsign, nn.Tanh,
   #                        nn.Sigmoid, nn.Hardsigmoid],

    #'module__n_neurons': [2, 5, 10, 15, 20, 25, 30, 40],
    #'module__n_layers': [1, 2, 3, 4, 5],
    #'module__neuron_reduction': [1.0, 0.9, 0.8, 0.7, 0,6, 0.5, 0,4, 0.3, 0.2, 0.1],

    'module__dropout_rate': [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]
}

grid = GridSearchCV(estimator= model, param_grid = param_grid, n_jobs=-1, cv=3)


grid_result = grid.fit(X, Y)


print("Best: %f using %s" % (grid_result.best_score_, grid_result.best_params_))
means = grid_result.cv_results_['mean_test_score']
stds = grid_result.cv_results_['std_test_score']
params = grid_result.cv_results_['params']
for mean, stdev, param in zip(means, stds, params):
    print("%f (%f) with: %r" % (mean, stdev, param))