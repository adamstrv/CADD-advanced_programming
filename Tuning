from neural_network_V2 import NN_BinClass
from skorch import NeuralNetClassifier
import torch.nn as nn
import torch.optim as optim

"https://machinelearningmastery.com/how-to-grid-search-hyperparameters-for-pytorch-models/"
from sklearn.model_selection import GridSearchCV

from train_network import X_tensor
from train_network import Y_tensor

X_tensor.flatten()

model = NeuralNetClassifier(
    NN_BinClass,
    max_epochs=150,
    batch_size=10,
    module__n_layers=3,
    module__n_neurons = 40,
    module__neuron_reduction =1,
    criterion = nn.BCELoss,
    optimizer = optim.SGD,
    verbose = False
)

param_grid = {
   # 'batch_size': [8, 16, 32, 64, 128, 256],
    'max_epochs': [10, 50, 100, 300, 500]
}


grid = GridSearchCV(estimator= model, param_grid = param_grid, n_jobs=-1, cv=3)

####################################################################################################  Right until here

grid_result = grid.fit(X_tensor, Y_tensor)

print("Best: %f using %s" % (grid_result.best_score_, grid_result.best_params_))
means = grid_result.cv_results_['mean_test_score']
stds = grid_result.cv_results_['std_test_score']
params = grid_result.cv_results_['params']
for mean, stdev, param in zip(means, stds, params):
    print("%f (%f) with: %r" % (mean, stdev, param))


"""
Model moet nog van naam veranderd worden naar ons model en X en Y moeten nog 
gedefinieerd worden als onze data. De getallen die nu worden gebruikt om de batch 
size en num epochs the bepalen kan nog uitgebreid worden om het preciezer te bepalen, maar 
dan duurt het denk wel een tijdje.
"""