from neural_network_V2 import NN_BinClass
from skorch import NeuralNetClassifier
import torch
import torch.nn as nn
import torch.optim as optim

"https://machinelearningmastery.com/how-to-grid-search-hyperparameters-for-pytorch-models/"
from sklearn.model_selection import GridSearchCV

from train_network import X_tensor
from train_network import Y_tensor

X = X_tensor
Y = Y_tensor.flatten()

model = NeuralNetClassifier(
    module = NN_BinClass,
    max_epochs=150,
    batch_size=10,
    module__input_size = 80,
 #   module__n_neurons = 40,
 #   module__neuron_reduction = 1,
 #   module__n_layers=3,
    criterion = nn.BCELoss,
    optimizer = optim.SGD
)

param_grid = {
    'batch_size': [8, 16, 32, 64, 128, 256],
    'max_epochs': [10, 50, 100, 300, 500]
}

grid = GridSearchCV(estimator= model, param_grid = param_grid, n_jobs=-1, cv=3)

print(model.get_params().keys())

grid_result = grid.fit(X, Y)


#print("Best: %f using %s" % (grid_result.best_score_, grid_result.best_params_))
#means = grid_result.cv_results_['mean_test_score']
#stds = grid_result.cv_results_['std_test_score']
#params = grid_result.cv_results_['params']
#for mean, stdev, param in zip(means, stds, params):
#    print("%f (%f) with: %r" % (mean, stdev, param))